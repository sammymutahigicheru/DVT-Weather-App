plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id("de.mannodermaus.android-junit5")
    id("com.google.android.libraries.mapsplatform.secrets-gradle-plugin")
    id 'jacoco'
    id("io.gitlab.arturbosch.detekt")
}

android {
    compileSdk 31

    defaultConfig {
        def versionMajor = 1
        def versionMinor = 1
        def versionPatch = 2

        applicationId "com.dvt.dvtweatherapp"
        minSdk 21
        targetSdk 31
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch //10101 i.e 1.1.1 version
        versionName "$versionMajor.$versionMinor.$versionPatch"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    buildFeatures {
        viewBinding = true
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(files([debugTree]))
        executionData.setFrom(fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ]))
    }

    testOptions.unitTests {
        includeAndroidResources = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
            }
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
            testLogging.events = ["passed", "skipped", "failed"]
        }
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    //internal libs
    implementation(project(":internal:data"))
    implementation(project(":internal:network"))
    implementation(project(":internal:core"))

    //app dependencies
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'

    //LIfecycle
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.3.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.3.1")
    implementation("androidx.lifecycle:lifecycle-process:2.3.1")
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt("androidx.lifecycle:lifecycle-common-java8:2.3.1")
    implementation("androidx.lifecycle:lifecycle-extensions:2.2.0")


    // Debug
    implementation('com.jakewharton.timber:timber:5.0.1')

    //DI
    implementation("org.koin:koin-android:2.1.5")
    implementation("org.koin:koin-android-scope:2.1.5")
    implementation("org.koin:koin-androidx-viewmodel:2.1.5")

    //Dexter
    implementation("com.karumi:dexter:6.2.3")

    //viewpager2
    implementation("androidx.viewpager2:viewpager2:1.0.0")

    //GOOGLE MAPS
    implementation("com.google.android.gms:play-services-maps:17.0.1")

    //Threading
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")

    implementation("com.google.android.gms:play-services-auth:19.2.0")
    implementation("com.google.android.gms:play-services-auth-api-phone:17.5.1")
    implementation("com.google.android.gms:play-services-location:18.0.0")

    //palette
    implementation 'androidx.palette:palette-ktx:1.0.0'

    //TEST
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation("com.google.truth:truth:1.1.3")
    testImplementation("org.robolectric:robolectric:4.6.1")
    testImplementation("androidx.test:runner:1.4.0")
    testImplementation("androidx.test:rules:1.4.0")
    testImplementation("androidx.arch.core:core-testing:2.1.0")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1")
    testImplementation("org.koin:koin-test:2.1.5")
    testImplementation("com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2")
    // test kotlinx.coroutines Flow
    testImplementation("app.cash.turbine:turbine:0.6.0")

    // spek
    testImplementation("org.spekframework.spek2:spek-dsl-jvm:2.0.15")
    testImplementation("org.spekframework.spek2:spek-runner-junit5:2.0.15")

    // spek requires kotlin-reflect, omit when already in classpath
    testImplementation("org.jetbrains.kotlin:kotlin-reflect:1.5.21")

    testImplementation("io.mockk:mockk:1.12.0")
    testImplementation("io.mockk:mockk-agent-jvm:1.12.0") {
        because(
                "This dependency resolves the NoClassDefFoundError when using spek " +
                        "https://github.com/mockk/mockk/issues/605," +
                        "https://github.com/spekframework/spek/issues/968"
        )
    }

    // JUnit5 dependencies
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.6.0") {
        because(
                "This allows us to run JUnit4 tests as well as Spek tests (JUnit5) from the command line." +
                        "Found in: https://github.com/spekframework/spek/issues/232#issuecomment-610732158"
        )
    }

    //instrumentation
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation("androidx.test:runner:1.4.0")
    androidTestImplementation("androidx.test:rules:1.4.0")
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation("androidx.test:core:1.4.0")
    androidTestImplementation("com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2")
    androidTestImplementation("androidx.test.espresso:espresso-intents:3.4.0")
    androidTestImplementation("androidx.test.espresso:espresso-contrib:3.4.0")
    androidTestImplementation("com.jakewharton.espresso:okhttp3-idling-resource:1.0.0")
    androidTestImplementation("org.koin:koin-test:2.1.5")
    implementation("androidx.test.espresso:espresso-idling-resource:3.4.0")

}
detekt {
    buildUponDefaultConfig = true
    allRules = false
    config = files("${project.rootDir}/detekt.yml")
    baseline = file("${project.rootDir}/detekt-baseline.xml")

    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = true
        sarif.enabled = true
    }

}